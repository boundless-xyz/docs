# NOTES
# workflows are triggered on events i.e. git push, open PR 
# workflows are made up of "jobs" 
# jobs are made up of a series of steps 
# each step can be a shell script or an "actions"
# jobs run on VM/container "runners"
# each runner can run a single job at a time
# GitHub provides Linux, Windows and macOS runners
# by default, jobs have no dependencies and therefore run in parallel
# separate jobs will run on separate runners, and so there is NO DATA SHARING between jobs
# therefore, to test code, it must first be built; this has to happen within the same job as two consequent steps
# jobs can have dependencies on other jobs i.e. only run when the parent job is complete and successful

# actions are made up of a set of jobs
# think of them as templates for a commonly repeated set of jobs
# for example, downloading a copy of the repository onto the runner i.e. actions/checkout@v4
# github actions can be found on the [github marketplace](https://github.com/marketplace?type=actions)


# considering segmenting workflow files into separate jobs?
# jobs can run in parallel but DO NOT share data across jobs
# need to specify event that this workflow will trigger on

# think about what to split into separate jobs and where
# think about what is actually being run, effectively "bun run ci" is the goal
# "ci": "bun run build && bun run check"
# "build": "vocs build && bun ./scripts/reindex.ts"
# "check": "run-p check-markdown check-links",
# "check-links": "bun ./scripts/check-links.ts",
# "check-markdown": "remark . --quiet --ignore-pattern 'src/pages/developers/smart-contracts/**'",

# this is without the "test-rust-code" crate, that will come later
# simply, testing the:
### links are alive
### use "remark" to lint

name: build and test
on: push
env:
  BUN_VERSION: 1.3.0
  NODE_VERSION: 24
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      ## SETUP DEPENDENCIES
      - name: Checkout latest commit
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with: 
          bun-version: 1.3.0

      - name: Install dependencies 
        run: bun install
         
      - name: Build docs
        run: bunx vocs build


      
